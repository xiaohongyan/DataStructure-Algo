Given a linked list, remove the n-th node from the end of list and return its head.
Example:
Given linked list: 1->2->3->4->5, and n = 2.
After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:
Given n will always be valid.
Follow up:
Could you do this in one pass?

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def removeNthFromEnd(self, head, n):
        """
        :type head: ListNode
        :type n: int
        :rtype: ListNode
        """
        if head is None or n<1:
            return None
        dummy = ListNode(None)
        dummy.next = head
        count = 0
        cur = dummy.next
        while cur:
            if cur:
                count+=1
                cur=cur.next
        if n == count:
            dummy.next = dummy.next.next
            return dummy.next
        preNode = self.search_by_index(head,count-n-1)
        preNode.next = preNode.next.next
        return dummy.next
    def search_by_index(self,head,index):
        if head is None or index<0:
            return None
        cur = head
        for i in range(index):
            cur = cur.next
            if cur is None:
                return None
        return cur
