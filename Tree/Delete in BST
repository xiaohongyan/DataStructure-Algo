# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution(object):
  def deleteTree(self, root, key):
    """
    input: TreeNode root, int key
    return: TreeNode
    """
    # write your solution here
    """
    when we delete a node, we use the smallest node
    in its right subtree to replace it
    """
    if not root:
      return None
    if root.val>key:
       root.left = self.deleteTree(root.left, key)
    elif root.val<key:
      root.right = self.deleteTree(root.right, key)
    else:
      if not root.left:
        return root.right
      if not root.right:
        return root.left
      tmp = root
      root = self.findMin(tmp.right)
      """必须先delete右子树的min，执行root.right = delete,
         再赋值root.left,否则delete的时候会delete 左子树
      """
      root.right = self.deleteMin(tmp.right)
      root.left = tmp.left
    return root    
    
    # delete the smallest in a tree
  def deleteMin(self, root):
    if not root.left:
      return root.right
    root.left = self.deleteMin(root.left)
    return root
    
    #find the Min 
  def findMin(self,root):
    if not root.left:
      return root
    return self.findMin(self,root.left)

  TIME: O(HEIGHT)
  SPACE: O height
    
    
    
    
    
    
