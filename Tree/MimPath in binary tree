#Given a binary tree, find its minimum depth. The minimum depth is the number of nodes along the shortest path from the root node 
#down to the nearest leaf node.
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution(object):
  def minDepth(self, root):
    """
    input: TreeNode root
    return: int
    """
    # write your solution here
    if not root:
      return 0
    elif not root.left and not root.right:
      return 1
    left = self.minDepth(root.left) if root.left else float('inf')
    right = self.minDepth(root.right) if root.right else float('inf')
    return min(left,right)+1
    
    #elif not root.right:
      #return self.minDepth(root.left)+1
    #elif not root.left:
      #return self.minDepth(root.right)+1
    #else:
      #left = self.minDepth(root.left)
      #right = self.minDepth(root.right)
      #return min(left,right)+1
    
